// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamBothServerClient is the client API for StreamBothServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamBothServerClient interface {
	// 双向端流模式
	BothStream(ctx context.Context, opts ...grpc.CallOption) (StreamBothServer_BothStreamClient, error)
}

type streamBothServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamBothServerClient(cc grpc.ClientConnInterface) StreamBothServerClient {
	return &streamBothServerClient{cc}
}

func (c *streamBothServerClient) BothStream(ctx context.Context, opts ...grpc.CallOption) (StreamBothServer_BothStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamBothServer_ServiceDesc.Streams[0], "/StreamBothServer/BothStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamBothServerBothStreamClient{stream}
	return x, nil
}

type StreamBothServer_BothStreamClient interface {
	Send(*StreamBothRequest) error
	Recv() (*StreamBothResponse, error)
	grpc.ClientStream
}

type streamBothServerBothStreamClient struct {
	grpc.ClientStream
}

func (x *streamBothServerBothStreamClient) Send(m *StreamBothRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamBothServerBothStreamClient) Recv() (*StreamBothResponse, error) {
	m := new(StreamBothResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamBothServerServer is the server API for StreamBothServer service.
// All implementations must embed UnimplementedStreamBothServerServer
// for forward compatibility
type StreamBothServerServer interface {
	// 双向端流模式
	BothStream(StreamBothServer_BothStreamServer) error
	mustEmbedUnimplementedStreamBothServerServer()
}

// UnimplementedStreamBothServerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamBothServerServer struct {
}

func (UnimplementedStreamBothServerServer) BothStream(StreamBothServer_BothStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BothStream not implemented")
}
func (UnimplementedStreamBothServerServer) mustEmbedUnimplementedStreamBothServerServer() {}

// UnsafeStreamBothServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamBothServerServer will
// result in compilation errors.
type UnsafeStreamBothServerServer interface {
	mustEmbedUnimplementedStreamBothServerServer()
}

func RegisterStreamBothServerServer(s grpc.ServiceRegistrar, srv StreamBothServerServer) {
	s.RegisterService(&StreamBothServer_ServiceDesc, srv)
}

func _StreamBothServer_BothStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamBothServerServer).BothStream(&streamBothServerBothStreamServer{stream})
}

type StreamBothServer_BothStreamServer interface {
	Send(*StreamBothResponse) error
	Recv() (*StreamBothRequest, error)
	grpc.ServerStream
}

type streamBothServerBothStreamServer struct {
	grpc.ServerStream
}

func (x *streamBothServerBothStreamServer) Send(m *StreamBothResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamBothServerBothStreamServer) Recv() (*StreamBothRequest, error) {
	m := new(StreamBothRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamBothServer_ServiceDesc is the grpc.ServiceDesc for StreamBothServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamBothServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamBothServer",
	HandlerType: (*StreamBothServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BothStream",
			Handler:       _StreamBothServer_BothStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/stream_both.proto",
}
