// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamRequestServerClient is the client API for StreamRequestServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamRequestServerClient interface {
	// 客户端流模式
	// 接收数据流，返回普通的响应
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamRequestServer_ClientStreamClient, error)
}

type streamRequestServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamRequestServerClient(cc grpc.ClientConnInterface) StreamRequestServerClient {
	return &streamRequestServerClient{cc}
}

func (c *streamRequestServerClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamRequestServer_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamRequestServer_ServiceDesc.Streams[0], "/StreamRequestServer/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamRequestServerClientStreamClient{stream}
	return x, nil
}

type StreamRequestServer_ClientStreamClient interface {
	Send(*StreamRequestRequest) error
	CloseAndRecv() (*StreamRequestResponse, error)
	grpc.ClientStream
}

type streamRequestServerClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamRequestServerClientStreamClient) Send(m *StreamRequestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamRequestServerClientStreamClient) CloseAndRecv() (*StreamRequestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamRequestServerServer is the server API for StreamRequestServer service.
// All implementations must embed UnimplementedStreamRequestServerServer
// for forward compatibility
type StreamRequestServerServer interface {
	// 客户端流模式
	// 接收数据流，返回普通的响应
	ClientStream(StreamRequestServer_ClientStreamServer) error
	mustEmbedUnimplementedStreamRequestServerServer()
}

// UnimplementedStreamRequestServerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamRequestServerServer struct {
}

func (UnimplementedStreamRequestServerServer) ClientStream(StreamRequestServer_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedStreamRequestServerServer) mustEmbedUnimplementedStreamRequestServerServer() {}

// UnsafeStreamRequestServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamRequestServerServer will
// result in compilation errors.
type UnsafeStreamRequestServerServer interface {
	mustEmbedUnimplementedStreamRequestServerServer()
}

func RegisterStreamRequestServerServer(s grpc.ServiceRegistrar, srv StreamRequestServerServer) {
	s.RegisterService(&StreamRequestServer_ServiceDesc, srv)
}

func _StreamRequestServer_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamRequestServerServer).ClientStream(&streamRequestServerClientStreamServer{stream})
}

type StreamRequestServer_ClientStreamServer interface {
	SendAndClose(*StreamRequestResponse) error
	Recv() (*StreamRequestRequest, error)
	grpc.ServerStream
}

type streamRequestServerClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamRequestServerClientStreamServer) SendAndClose(m *StreamRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamRequestServerClientStreamServer) Recv() (*StreamRequestRequest, error) {
	m := new(StreamRequestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamRequestServer_ServiceDesc is the grpc.ServiceDesc for StreamRequestServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamRequestServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamRequestServer",
	HandlerType: (*StreamRequestServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _StreamRequestServer_ClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/stream_request.proto",
}
