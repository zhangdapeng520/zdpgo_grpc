// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamResponseServerClient is the client API for StreamResponseServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamResponseServerClient interface {
	// 服务端流模式
	ServerStream(ctx context.Context, in *StreamResponseRequest, opts ...grpc.CallOption) (StreamResponseServer_ServerStreamClient, error)
}

type streamResponseServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamResponseServerClient(cc grpc.ClientConnInterface) StreamResponseServerClient {
	return &streamResponseServerClient{cc}
}

func (c *streamResponseServerClient) ServerStream(ctx context.Context, in *StreamResponseRequest, opts ...grpc.CallOption) (StreamResponseServer_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamResponseServer_ServiceDesc.Streams[0], "/StreamResponseServer/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamResponseServerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamResponseServer_ServerStreamClient interface {
	Recv() (*StreamResponseResponse, error)
	grpc.ClientStream
}

type streamResponseServerServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamResponseServerServerStreamClient) Recv() (*StreamResponseResponse, error) {
	m := new(StreamResponseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamResponseServerServer is the server API for StreamResponseServer service.
// All implementations must embed UnimplementedStreamResponseServerServer
// for forward compatibility
type StreamResponseServerServer interface {
	// 服务端流模式
	ServerStream(*StreamResponseRequest, StreamResponseServer_ServerStreamServer) error
	mustEmbedUnimplementedStreamResponseServerServer()
}

// UnimplementedStreamResponseServerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamResponseServerServer struct {
}

func (UnimplementedStreamResponseServerServer) ServerStream(*StreamResponseRequest, StreamResponseServer_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedStreamResponseServerServer) mustEmbedUnimplementedStreamResponseServerServer() {}

// UnsafeStreamResponseServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamResponseServerServer will
// result in compilation errors.
type UnsafeStreamResponseServerServer interface {
	mustEmbedUnimplementedStreamResponseServerServer()
}

func RegisterStreamResponseServerServer(s grpc.ServiceRegistrar, srv StreamResponseServerServer) {
	s.RegisterService(&StreamResponseServer_ServiceDesc, srv)
}

func _StreamResponseServer_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamResponseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamResponseServerServer).ServerStream(m, &streamResponseServerServerStreamServer{stream})
}

type StreamResponseServer_ServerStreamServer interface {
	Send(*StreamResponseResponse) error
	grpc.ServerStream
}

type streamResponseServerServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamResponseServerServerStreamServer) Send(m *StreamResponseResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamResponseServer_ServiceDesc is the grpc.ServiceDesc for StreamResponseServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamResponseServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamResponseServer",
	HandlerType: (*StreamResponseServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _StreamResponseServer_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stream_response.proto",
}
