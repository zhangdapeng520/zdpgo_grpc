// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: stream_request.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 流式请求：和普通请求没有区别
type StreamRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StreamRequestRequest) Reset() {
	*x = StreamRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequestRequest) ProtoMessage() {}

func (x *StreamRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequestRequest.ProtoReflect.Descriptor instead.
func (*StreamRequestRequest) Descriptor() ([]byte, []int) {
	return file_stream_request_proto_rawDescGZIP(), []int{0}
}

func (x *StreamRequestRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 流式响应：和普通响应没有区别
type StreamRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StreamRequestResponse) Reset() {
	*x = StreamRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequestResponse) ProtoMessage() {}

func (x *StreamRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequestResponse.ProtoReflect.Descriptor instead.
func (*StreamRequestResponse) Descriptor() ([]byte, []int) {
	return file_stream_request_proto_rawDescGZIP(), []int{1}
}

func (x *StreamRequestResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_stream_request_proto protoreflect.FileDescriptor

var file_stream_request_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x56, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_request_proto_rawDescOnce sync.Once
	file_stream_request_proto_rawDescData = file_stream_request_proto_rawDesc
)

func file_stream_request_proto_rawDescGZIP() []byte {
	file_stream_request_proto_rawDescOnce.Do(func() {
		file_stream_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_request_proto_rawDescData)
	})
	return file_stream_request_proto_rawDescData
}

var file_stream_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_request_proto_goTypes = []interface{}{
	(*StreamRequestRequest)(nil),  // 0: StreamRequestRequest
	(*StreamRequestResponse)(nil), // 1: StreamRequestResponse
}
var file_stream_request_proto_depIdxs = []int32{
	0, // 0: StreamRequestServer.ClientStream:input_type -> StreamRequestRequest
	1, // 1: StreamRequestServer.ClientStream:output_type -> StreamRequestResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_request_proto_init() }
func file_stream_request_proto_init() {
	if File_stream_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_request_proto_goTypes,
		DependencyIndexes: file_stream_request_proto_depIdxs,
		MessageInfos:      file_stream_request_proto_msgTypes,
	}.Build()
	File_stream_request_proto = out.File
	file_stream_request_proto_rawDesc = nil
	file_stream_request_proto_goTypes = nil
	file_stream_request_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamRequestServerClient is the client API for StreamRequestServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamRequestServerClient interface {
	// 客户端流模式
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamRequestServer_ClientStreamClient, error)
}

type streamRequestServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamRequestServerClient(cc grpc.ClientConnInterface) StreamRequestServerClient {
	return &streamRequestServerClient{cc}
}

func (c *streamRequestServerClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamRequestServer_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamRequestServer_serviceDesc.Streams[0], "/StreamRequestServer/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamRequestServerClientStreamClient{stream}
	return x, nil
}

type StreamRequestServer_ClientStreamClient interface {
	Send(*StreamRequestRequest) error
	CloseAndRecv() (*StreamRequestResponse, error)
	grpc.ClientStream
}

type streamRequestServerClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamRequestServerClientStreamClient) Send(m *StreamRequestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamRequestServerClientStreamClient) CloseAndRecv() (*StreamRequestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamRequestServerServer is the server API for StreamRequestServer service.
type StreamRequestServerServer interface {
	// 客户端流模式
	ClientStream(StreamRequestServer_ClientStreamServer) error
}

// UnimplementedStreamRequestServerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamRequestServerServer struct {
}

func (*UnimplementedStreamRequestServerServer) ClientStream(StreamRequestServer_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}

func RegisterStreamRequestServerServer(s *grpc.Server, srv StreamRequestServerServer) {
	s.RegisterService(&_StreamRequestServer_serviceDesc, srv)
}

func _StreamRequestServer_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamRequestServerServer).ClientStream(&streamRequestServerClientStreamServer{stream})
}

type StreamRequestServer_ClientStreamServer interface {
	SendAndClose(*StreamRequestResponse) error
	Recv() (*StreamRequestRequest, error)
	grpc.ServerStream
}

type streamRequestServerClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamRequestServerClientStreamServer) SendAndClose(m *StreamRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamRequestServerClientStreamServer) Recv() (*StreamRequestRequest, error) {
	m := new(StreamRequestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamRequestServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StreamRequestServer",
	HandlerType: (*StreamRequestServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _StreamRequestServer_ClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream_request.proto",
}
